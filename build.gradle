import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'idea'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.0.14'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.21'
}

group = 'org.kivilev'

idea {
    project {
        languageLevel = 17
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

group = 'org.kivilev'
bootJar {
    archiveBaseName = 'app'
}

ext {
    set('springBootVersion', "3.1.0")
    set('testcontainersVersion', "1.18.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}


dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.postgresql:postgresql:42.6.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.with {
        encoding = 'UTF-8'
    }
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '10.3.4'
    configFile file("$project.rootDir/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

apply plugin: 'com.github.spotbugs'
spotbugs {
    showProgress = false
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("$project.rootDir/spotbugs-exclude.xml")
}